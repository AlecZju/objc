//
//  NSData+Bases.m
//  Bases
//
//  Created by Robert C. Nix on 10/04/10.
//  Copyright 2010 nicerobot.org. All rights reserved.
//
#import <CommonCrypto/CommonHMAC.h>
#import "BaseChars.h"
#import "NSData+Bases.h"
#import "NSString+reverse.h"

uint32_t divideBy(int base, uint32_t * number, int size) {
  uint32_t r = 0;
  uint32_t d;
  for (int i=0; i<size; ++i) {
    d = (number[i] + r*0x100000000) / base;
    r = (number[i] + r*0x100000000) % base;
    number[i] = d;
  }
  return r;
}

int zero(uint32_t* number, int size) {
  for (int i=0; i<size; ++i) {
    if (number[i] != 0) {
      return 0;
    }
  }
  return 1;
}

@implementation NSData (Bases)

-(NSString*) toBase:(int) base {
  return [self toBase:base withPadding:true];
}

-(NSString*) toBase:(int) base withPadding:(BOOL) pad {

  // baseN
  NSString *bases = [BaseChars get:base];
  if (!bases) return nil;
  
  int size = [self length];

  // NSString+Bases depends on this being an NSMutableString.
  NSMutableString *result = [NSMutableString stringWithCapacity:size*4];

  int widen = 4-size%4;
  size += widen;
  unsigned char buf[size];
  [self getBytes:buf+widen length:size];
  while(widen) {
    buf[--widen] = 0;
  }
  uint32_t *number = (uint32_t*) buf;
  size /= 4;

  do {
    uint32_t r = divideBy(base,number,size);
    unsigned char c = [bases characterAtIndex:r];
    [result appendFormat:@"%c",c];
  } while(!zero(number,size));
  
  return [result reverse];
}

-(NSString*) toBase2 { return [self toBase:2]; }
-(NSString*) toBase8 { return [self toBase:8]; }
-(NSString*) toBase16 { return [self toBase:16]; }
-(NSString*) toBase32 { return [self toBase:32]; }
-(NSString*) toBase64 { return [self toBase:64]; }

-(NSString*) toBase2withPadding:(BOOL) pad { return [self toBase:2 withPadding:pad]; }
-(NSString*) toBase8withPadding:(BOOL) pad { return [self toBase:8 withPadding:pad]; }
-(NSString*) toBase16withPadding:(BOOL) pad { return [self toBase:16 withPadding:pad]; }
-(NSString*) toBase32withPadding:(BOOL) pad { return [self toBase:32 withPadding:pad]; }
-(NSString*) toBase64withPadding:(BOOL) pad { return [self toBase:64 withPadding:pad]; }

@end
